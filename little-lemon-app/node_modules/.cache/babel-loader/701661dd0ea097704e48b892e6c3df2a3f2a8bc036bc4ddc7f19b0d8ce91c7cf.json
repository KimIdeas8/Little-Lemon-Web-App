{"ast":null,"code":"import jsonData from './available_timeslots.json';\nconst seededGenerator = (date, hour) => {\n  const m = 9;\n  const d = date.getDate();\n  const result = (d + hour) % m / 10;\n  return result;\n};\nfunction formatDateToYYYYMMDD(date) {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\nexport const fetchAPI = date => {\n  formatDateToYYYYMMDD(date); //reformatted to \"yyyy-mm-dd\"\n  let timeslotsArray = [];\n  jsonData.forEach(dateData => {\n    if (dateData.date == date) {\n      timeslotsArray = dateData.time; //re-assignment to 'availableTimes'\n      timeslotsArray.unshift(\"===Select an available timeslot===\"); //return this final array of timeslots\n    }\n  });\n  return timeslotsArray;\n};\nexport const submitAPI = formData => true;\nconst fakeAPI = {\n  fetchAPI: fetchAPI,\n  submitAPI: submitAPI\n};\nexport default fakeAPI;","map":{"version":3,"names":["jsonData","seededGenerator","date","hour","m","d","getDate","result","formatDateToYYYYMMDD","year","getFullYear","month","String","getMonth","padStart","day","fetchAPI","timeslotsArray","forEach","dateData","time","unshift","submitAPI","formData","fakeAPI"],"sources":["C:/Users/kberl/Downloads/coursera-1/Little Lemon Web App/little-lemon-app/src/components/api.js"],"sourcesContent":["import jsonData from './available_timeslots.json'\r\n\r\nconst seededGenerator = (date, hour) => {\r\n    const m = 9;\r\n    const d = date.getDate();\r\n    const result = ((d + hour) % m ) / 10;\r\n\r\n    return result;\r\n  }\r\n\r\nfunction formatDateToYYYYMMDD(date) {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n\r\n  return `${year}-${month}-${day}`;\r\n}\r\n\r\nexport const fetchAPI = (date) => {\r\n  formatDateToYYYYMMDD(date); //reformatted to \"yyyy-mm-dd\"\r\n  let timeslotsArray = [];\r\n\r\n  jsonData.forEach((dateData) => {\r\n    if(dateData.date == date){\r\n      timeslotsArray = dateData.time; //re-assignment to 'availableTimes'\r\n      timeslotsArray.unshift(\"===Select an available timeslot===\"); //return this final array of timeslots\r\n    }\r\n  })\r\n\r\n  return timeslotsArray;\r\n};\r\n\r\nexport const submitAPI = formData => true;\r\n\r\nconst fakeAPI = {\r\nfetchAPI: fetchAPI,\r\nsubmitAPI: submitAPI,\r\n}\r\n\r\nexport default fakeAPI;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,4BAA4B;AAEjD,MAAMC,eAAe,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,CAAC,GAAG,CAAC;EACX,MAAMC,CAAC,GAAGH,IAAI,CAACI,OAAO,CAAC,CAAC;EACxB,MAAMC,MAAM,GAAI,CAACF,CAAC,GAAGF,IAAI,IAAIC,CAAC,GAAK,EAAE;EAErC,OAAOG,MAAM;AACf,CAAC;AAEH,SAASC,oBAAoBA,CAACN,IAAI,EAAE;EAClC,MAAMO,IAAI,GAAGP,IAAI,CAACQ,WAAW,CAAC,CAAC;EAC/B,MAAMC,KAAK,GAAGC,MAAM,CAACV,IAAI,CAACW,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EAC5D,MAAMC,GAAG,GAAGH,MAAM,CAACV,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,CAACQ,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAEnD,OAAQ,GAAEL,IAAK,IAAGE,KAAM,IAAGI,GAAI,EAAC;AAClC;AAEA,OAAO,MAAMC,QAAQ,GAAId,IAAI,IAAK;EAChCM,oBAAoB,CAACN,IAAI,CAAC,CAAC,CAAC;EAC5B,IAAIe,cAAc,GAAG,EAAE;EAEvBjB,QAAQ,CAACkB,OAAO,CAAEC,QAAQ,IAAK;IAC7B,IAAGA,QAAQ,CAACjB,IAAI,IAAIA,IAAI,EAAC;MACvBe,cAAc,GAAGE,QAAQ,CAACC,IAAI,CAAC,CAAC;MAChCH,cAAc,CAACI,OAAO,CAAC,oCAAoC,CAAC,CAAC,CAAC;IAChE;EACF,CAAC,CAAC;EAEF,OAAOJ,cAAc;AACvB,CAAC;AAED,OAAO,MAAMK,SAAS,GAAGC,QAAQ,IAAI,IAAI;AAEzC,MAAMC,OAAO,GAAG;EAChBR,QAAQ,EAAEA,QAAQ;EAClBM,SAAS,EAAEA;AACX,CAAC;AAED,eAAeE,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}