{"ast":null,"code":"import jsonData from './available_timeslots.json';\nfunction formatDateToYYYYMMDD(date) {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\nfunction dateIsMorethanAWeekAway(selectedDateObj) {\n  const today = new Date();\n  // today.setHours(0,0,0);\n  // selectedDateObj.setHours(0,0,0);\n  return selectedDateObj.getDate() >= today.getDate() + 7;\n}\nfunction dayOfWeek(date) {\n  const today = new Date();\n  return (Number(date.getDate()) - Number(today.getDate())) % 7;\n}\nexport const fetchAPI = date => {\n  // let reformattedDate = formatDateToYYYYMMDD(date); //reformatted to \"yyyy-mm-dd\"\n  let timeslotsArray = [];\n  if (dateIsMorethanAWeekAway(date)) {\n    timeslotsArray = ['11:00', '12:00', '13:00', '14:00', '15:00', '16:00', '17:00', \"18:00\", '19:00', '20:00', '21:00', '22:00', '23:00'];\n  } else {\n    jsonData.forEach(dateData => {\n      if (dayOfWeek(date) === Number(dateData.date)) {\n        dateData.time.forEach(timeslot => {\n          timeslotsArray.push(timeslot);\n        });\n      }\n    });\n  }\n  timeslotsArray.unshift(\"===Select an available timeslot===\");\n  return timeslotsArray;\n};\nexport const submitAPI = formData => true;\nconst fakeAPI = {\n  fetchAPI: fetchAPI,\n  submitAPI: submitAPI\n};\nexport default fakeAPI;","map":{"version":3,"names":["jsonData","formatDateToYYYYMMDD","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","dateIsMorethanAWeekAway","selectedDateObj","today","Date","dayOfWeek","Number","fetchAPI","timeslotsArray","forEach","dateData","time","timeslot","push","unshift","submitAPI","formData","fakeAPI"],"sources":["C:/Users/kberl/Downloads/coursera-1/Little Lemon Web App/little-lemon-app/src/components/api.js"],"sourcesContent":["import jsonData from './available_timeslots.json'\r\n\r\n\r\nfunction formatDateToYYYYMMDD(date) {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n\r\n  return `${year}-${month}-${day}`;\r\n}\r\n\r\nfunction dateIsMorethanAWeekAway(selectedDateObj){\r\n  const today = new Date();\r\n  // today.setHours(0,0,0);\r\n  // selectedDateObj.setHours(0,0,0);\r\n  return(\r\n    selectedDateObj.getDate() >= today.getDate()+7\r\n  )\r\n}\r\n\r\nfunction dayOfWeek(date){\r\n  const today = new Date();\r\n  return(\r\n    (Number(date.getDate()) - Number(today.getDate())) % 7\r\n  )\r\n}\r\n\r\nexport const fetchAPI = (date) => {\r\n\r\n  // let reformattedDate = formatDateToYYYYMMDD(date); //reformatted to \"yyyy-mm-dd\"\r\n  let timeslotsArray = [];\r\n\r\n  if(dateIsMorethanAWeekAway(date)){\r\n    timeslotsArray = ['11:00','12:00','13:00','14:00','15:00','16:00', '17:00', \"18:00\", '19:00', '20:00', '21:00', '22:00', '23:00'];\r\n  }\r\n  else{\r\n    jsonData.forEach((dateData) => {\r\n      if(dayOfWeek(date) === Number(dateData.date)){\r\n        dateData.time.forEach((timeslot) => {\r\n          timeslotsArray.push(timeslot);\r\n        });\r\n      }\r\n    })\r\n  }\r\n  timeslotsArray.unshift(\"===Select an available timeslot===\")\r\n  return timeslotsArray;\r\n};\r\n\r\nexport const submitAPI = formData => true;\r\n\r\nconst fakeAPI = {\r\nfetchAPI: fetchAPI,\r\nsubmitAPI: submitAPI,\r\n}\r\n\r\nexport default fakeAPI;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,4BAA4B;AAGjD,SAASC,oBAAoBA,CAACC,IAAI,EAAE;EAClC,MAAMC,IAAI,GAAGD,IAAI,CAACE,WAAW,CAAC,CAAC;EAC/B,MAAMC,KAAK,GAAGC,MAAM,CAACJ,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EAC5D,MAAMC,GAAG,GAAGH,MAAM,CAACJ,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAEnD,OAAQ,GAAEL,IAAK,IAAGE,KAAM,IAAGI,GAAI,EAAC;AAClC;AAEA,SAASE,uBAAuBA,CAACC,eAAe,EAAC;EAC/C,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxB;EACA;EACA,OACEF,eAAe,CAACF,OAAO,CAAC,CAAC,IAAIG,KAAK,CAACH,OAAO,CAAC,CAAC,GAAC,CAAC;AAElD;AAEA,SAASK,SAASA,CAACb,IAAI,EAAC;EACtB,MAAMW,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxB,OACE,CAACE,MAAM,CAACd,IAAI,CAACQ,OAAO,CAAC,CAAC,CAAC,GAAGM,MAAM,CAACH,KAAK,CAACH,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;AAE1D;AAEA,OAAO,MAAMO,QAAQ,GAAIf,IAAI,IAAK;EAEhC;EACA,IAAIgB,cAAc,GAAG,EAAE;EAEvB,IAAGP,uBAAuB,CAACT,IAAI,CAAC,EAAC;IAC/BgB,cAAc,GAAG,CAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACnI,CAAC,MACG;IACFlB,QAAQ,CAACmB,OAAO,CAAEC,QAAQ,IAAK;MAC7B,IAAGL,SAAS,CAACb,IAAI,CAAC,KAAKc,MAAM,CAACI,QAAQ,CAAClB,IAAI,CAAC,EAAC;QAC3CkB,QAAQ,CAACC,IAAI,CAACF,OAAO,CAAEG,QAAQ,IAAK;UAClCJ,cAAc,CAACK,IAAI,CAACD,QAAQ,CAAC;QAC/B,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ;EACAJ,cAAc,CAACM,OAAO,CAAC,oCAAoC,CAAC;EAC5D,OAAON,cAAc;AACvB,CAAC;AAED,OAAO,MAAMO,SAAS,GAAGC,QAAQ,IAAI,IAAI;AAEzC,MAAMC,OAAO,GAAG;EAChBV,QAAQ,EAAEA,QAAQ;EAClBQ,SAAS,EAAEA;AACX,CAAC;AAED,eAAeE,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}